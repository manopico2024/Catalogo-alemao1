# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Catalogo1.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog


class Ui_Catalogo(object):
    def setupUi(self, Catalogo):
        Catalogo.setObjectName("Catalogo")
        Catalogo.resize(834, 552)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Catalogo.sizePolicy().hasHeightForWidth())
        Catalogo.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        Catalogo.setFont(font)
        Catalogo.setMouseTracking(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/RS.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Catalogo.setWindowIcon(icon)
        Catalogo.setWindowOpacity(3.0)
        Catalogo.setToolTipDuration(-1)
        Catalogo.setLayoutDirection(QtCore.Qt.RightToLeft)
        Catalogo.setDocumentMode(True)
        Catalogo.setDockNestingEnabled(True)
        Catalogo.setUnifiedTitleAndToolBarOnMac(True)
        self.centralwidget = QtWidgets.QWidget(Catalogo)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(2, 7, 830, 540))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.tabWidget.setFont(font)
        self.tabWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tabWidget.setAutoFillBackground(True)
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setObjectName("tabWidget")
        self.tab_configuracoes = QtWidgets.QWidget()
        self.tab_configuracoes.setObjectName("tab_configuracoes")
        self.frame = QtWidgets.QFrame(self.tab_configuracoes)
        self.frame.setGeometry(QtCore.QRect(8, 124, 261, 88))
        self.frame.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.frame.setStyleSheet("border: 1px solid black;\n"
"background-color: rgb(245, 245, 245);")
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setMidLineWidth(0)
        self.frame.setObjectName("frame")
        self.label_nome = QtWidgets.QLabel(self.frame)
        self.label_nome.setGeometry(QtCore.QRect(10, 18, 106, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.label_nome.setFont(font)
        self.label_nome.setMouseTracking(False)
        self.label_nome.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_nome.setAutoFillBackground(False)
        self.label_nome.setStyleSheet("background-color: rgb(218, 218, 218);\n"
"border: 1px solid black;")
        self.label_nome.setObjectName("label_nome")
        self.entry_nome = QtWidgets.QLineEdit(self.frame)
        self.entry_nome.setGeometry(QtCore.QRect(122, 18, 128, 20))
        self.entry_nome.setStyleSheet("border:1px solid black;\n"
"background-color: rgb(255, 255, 255);")
        self.entry_nome.setObjectName("entry_nome")
        self.combobox_status = QtWidgets.QComboBox(self.frame)
        self.combobox_status.setGeometry(QtCore.QRect(122, 50, 129, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.combobox_status.sizePolicy().hasHeightForWidth())
        self.combobox_status.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.combobox_status.setFont(font)
        self.combobox_status.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.combobox_status.setAutoFillBackground(False)
        self.combobox_status.setStyleSheet("border:1px solid black;\n"
"background-color: rgb(255, 255, 255);")
        self.combobox_status.setEditable(False)
        self.combobox_status.setDuplicatesEnabled(False)
        self.combobox_status.setObjectName("combobox_status")
        self.combobox_status.addItem("")
        self.combobox_status.setItemText(0, "")
        self.combobox_status.addItem("")
        self.combobox_status.addItem("")
        self.combobox_status.addItem("")
        self.combobox_status.addItem("")
        self.combobox_status.addItem("")
        self.combobox_status.addItem("")
        # Tabela para listar espécies
        self.table = QtWidgets.QTableWidget(self.tab_configuracoes)
        self.table.setGeometry(QtCore.QRect(500, 300, 480, 270))
        self.table.setColumnCount(5)  # Adicionamos uma coluna para a imagem
        self.table.setHorizontalHeaderLabels(["Id", "Nome", "Descrição", "Status", "Imagem"])
        self.table.setColumnWidth(0, 100)
        self.table.setColumnWidth(1, 170)
        self.table.setColumnWidth(2, 170)
        self.table.setColumnWidth(3, 150)
        self.table.setColumnWidth(4, 150)
        self.table.setSelectionBehavior(QtWidgets.QTableWidget.SelectRows)
        self.label_status = QtWidgets.QLabel(self.frame)
        self.label_status.setGeometry(QtCore.QRect(10, 50, 57, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_status.setFont(font)
        self.label_status.setStyleSheet("background-color: rgb(218, 218, 218);\n"
"border:1px solid black;")
        self.label_status.setObjectName("label_status")
        self.frame_img = QtWidgets.QFrame(self.tab_configuracoes)
        self.frame_img.setGeometry(QtCore.QRect(292, 33, 520, 180))
        self.frame_img.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.frame_img.setAutoFillBackground(True)
        self.frame_img.setStyleSheet("boder: 1px solid black;")
        self.frame_img.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_img.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_img.setLineWidth(1)
        self.frame_img.setMidLineWidth(1)
        self.frame_img.setObjectName("frame_img")
        self.text_descricao = QtWidgets.QTextEdit(self.frame_img)
        self.text_descricao.setGeometry(QtCore.QRect(144, 5, 256, 170))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_descricao.setFont(font)
        self.text_descricao.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.text_descricao.setAutoFillBackground(True)
        self.text_descricao.setStyleSheet("border: 0.5px solid black;")
        self.text_descricao.setFrameShape(QtWidgets.QFrame.Box)
        self.text_descricao.setFrameShadow(QtWidgets.QFrame.Plain)
        self.text_descricao.setLineWidth(0)
        self.text_descricao.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.text_descricao.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.text_descricao.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.text_descricao.setTabChangesFocus(True)
        self.text_descricao.setObjectName("text_descricao")
        self.label_imagem = QtWidgets.QLabel(self.frame_img)
        self.label_imagem.setGeometry(QtCore.QRect(410, 5, 104, 84))
        self.label_imagem.setToolTipDuration(-1)
        self.label_imagem.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_imagem.setAutoFillBackground(False)
        self.label_imagem.setStyleSheet("border-color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;")
        self.label_imagem.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_imagem.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label_imagem.setLineWidth(0)
        self.label_imagem.setText("")
        self.label_imagem.setTextFormat(QtCore.Qt.PlainText)
        self.label_imagem.setPixmap(QtGui.QPixmap("img/RS.png"))
        self.label_imagem.setScaledContents(True)
        self.label_imagem.setAlignment(QtCore.Qt.AlignCenter)
        self.label_imagem.setWordWrap(True)
        self.label_imagem.setIndent(7)
        self.label_imagem.setOpenExternalLinks(False)
        self.label_imagem.setObjectName("label_imagem")
        self.button_imagem = QtWidgets.QPushButton(self.frame_img)
        self.button_imagem.setGeometry(QtCore.QRect(414, 94, 96, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.button_imagem.setFont(font)
        self.button_imagem.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.button_imagem.setAutoFillBackground(False)
        self.button_imagem.setAutoDefault(True)
        self.button_imagem.setDefault(True)
        self.button_imagem.setFlat(False)
        self.button_imagem.setObjectName("button_imagem")
        self.label_descricao = QtWidgets.QLabel(self.frame_img)
        self.label_descricao.setGeometry(QtCore.QRect(64, 5, 75, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_descricao.setFont(font)
        self.label_descricao.setStyleSheet("border:1px solid black;\n"
"background-color: rgb(218, 218, 218);")
        self.label_descricao.setObjectName("label_descricao")
        self.button_salvar_arquivo = QtWidgets.QPushButton(self.frame_img)
        self.button_salvar_arquivo.setGeometry(QtCore.QRect(414, 120, 96, 25))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.button_salvar_arquivo.setFont(font)
        self.button_salvar_arquivo.setAutoDefault(True)
        self.button_salvar_arquivo.setDefault(True)
        self.button_salvar_arquivo.setObjectName("button_salvar_arquivo")
        self.label_logo = QtWidgets.QLabel(self.tab_configuracoes)
        self.label_logo.setGeometry(QtCore.QRect(7, 34, 262, 51))
        self.label_logo.setStyleSheet("background-color: rgb(245,245,245);\n"
"border:0.5px solid black;")
        self.label_logo.setText("")
        self.label_logo.setObjectName("label_logo")
        self.button_remover = QtWidgets.QPushButton(self.tab_configuracoes)
        self.button_remover.setGeometry(QtCore.QRect(250, 230, 75, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.button_remover.setFont(font)
        self.button_remover.setToolTipDuration(-1)
        self.button_remover.setAutoDefault(True)
        self.button_remover.setDefault(True)
        self.button_remover.setObjectName("button_remover")
        self.button_limpar = QtWidgets.QPushButton(self.tab_configuracoes)
        self.button_limpar.setGeometry(QtCore.QRect(90, 230, 75, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.button_limpar.setFont(font)
        self.button_limpar.setToolTipDuration(-1)
        self.button_limpar.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.button_limpar.setAutoFillBackground(False)
        self.button_limpar.setAutoDefault(True)
        self.button_limpar.setDefault(True)
        self.button_limpar.setObjectName("button_limpar")
        self.button_adicionar = QtWidgets.QPushButton(self.tab_configuracoes)
        self.button_adicionar.setGeometry(QtCore.QRect(10, 230, 75, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.button_adicionar.setFont(font)
        self.button_adicionar.setToolTipDuration(-1)
        self.button_adicionar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.button_adicionar.setAutoFillBackground(False)
        self.button_adicionar.setAutoRepeatDelay(300)
        self.button_adicionar.setAutoDefault(True)
        self.button_adicionar.setDefault(True)
        self.button_adicionar.setFlat(False)
        self.button_adicionar.setObjectName("button_adicionar")
        self.button_buscar = QtWidgets.QPushButton(self.tab_configuracoes)
        self.button_buscar.setGeometry(QtCore.QRect(170, 230, 75, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.button_buscar.setFont(font)
        self.button_buscar.setToolTipDuration(-1)
        self.button_buscar.setAutoDefault(True)
        self.button_buscar.setDefault(True)
        self.button_buscar.setFlat(False)
        self.button_buscar.setObjectName("button_buscar")
        self.label_botoes = QtWidgets.QLabel(self.tab_configuracoes)
        self.label_botoes.setGeometry(QtCore.QRect(2, 222, 331, 41))
        self.label_botoes.setStyleSheet("background-color: rgb(245,245,245);\n"
"border:0.5px solid black;")
        self.label_botoes.setText("")
        self.label_botoes.setObjectName("label_botoes")
        self.label_botoes.raise_()
        self.button_buscar.raise_()
        self.button_remover.raise_()
        self.button_limpar.raise_()
        self.button_adicionar.raise_()
        self.frame.raise_()
        self.frame_img.raise_()
        self.label_logo.raise_()
        self.tabWidget.addTab(self.tab_configuracoes, "")
        Catalogo.setCentralWidget(self.centralwidget)

        self.retranslateUi(Catalogo)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Catalogo)
        # Tabela para listar espécies
        self.table = QtWidgets.QTableWidget(self.tab_configuracoes)
        self.table.setGeometry(QtCore.QRect(7, 287, 810, 220))
        self.table.setColumnCount(5)  # Adicionamos uma coluna para a imagem
        self.table.setHorizontalHeaderLabels(["Id", "Nome", "Descrição", "Status", "Imagem"])
        self.table.setColumnWidth(0, 100)
        self.table.setColumnWidth(1, 170)
        self.table.setColumnWidth(2, 170)
        self.table.setColumnWidth(3, 150)
        self.table.setColumnWidth(4, 150)
        self.table.setSelectionBehavior(QtWidgets.QTableWidget.SelectRows)
    def retranslateUi(self, Catalogo):
        _translate = QtCore.QCoreApplication.translate
        Catalogo.setWindowTitle(_translate("Catalogo", "Catálogo"))
        self.label_nome.setText(_translate("Catalogo", "Nome da Espécie:"))
        self.combobox_status.setItemText(1, _translate("Catalogo", "Pouco precoupante"))
        self.combobox_status.setItemText(2, _translate("Catalogo", "Preocupante"))
        self.combobox_status.setItemText(3, _translate("Catalogo", "Alerta"))
        self.combobox_status.setItemText(4, _translate("Catalogo", "Em Extinção"))
        self.combobox_status.setItemText(5, _translate("Catalogo", "Crítico"))
        self.combobox_status.setItemText(6, _translate("Catalogo", "Extinto"))
        self.label_status.setText(_translate("Catalogo", "Status:"))
        self.button_imagem.setText(_translate("Catalogo", "Imagem"))
        self.label_descricao.setText(_translate("Catalogo", "Descrição:"))
        self.button_salvar_arquivo.setText(_translate("Catalogo", "Salvar Arquivo"))
        self.button_remover.setText(_translate("Catalogo", "Deletar"))
        self.button_limpar.setText(_translate("Catalogo", "Limpar"))
        self.button_adicionar.setText(_translate("Catalogo", "Cadastrar"))
        self.button_buscar.setText(_translate("Catalogo", "Buscar"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_configuracoes), _translate("Catalogo", "Configurações"))
        # Conectar Botões
        self.button_adicionar.clicked.connect(self.adicionar_especie)
        self.button_imagem.clicked.connect(self.carregar_imagem)
        self.button_buscar.clicked.connect(self.buscar_especie)

        # Conectar o evento de clique na tabela
        self.table.cellClicked.connect(self.preencher_campos)

    def adicionar_especie(self):
        """Adiciona uma nova espécie ao banco de dados e atualiza a tabela"""
        nome = self.txt_nome.text().strip()
        status = self.combobox_status.currentText()
        descricao = self.txt_descricao.toPlainText().strip()

        if not nome:
            QtWidgets.QMessageBox.warning(None, "Erro", "O nome da espécie é obrigatório!")
            return

        try:
            with open(self.caminho_imagem, "rb") as file:
                imagem_blob = file.read()
        except Exception:
            imagem_blob = None

        try:
            self.cursor.execute(
                "INSERT INTO especies (nome, status, descricao, imagem) VALUES (?, ?, ?, ?)",
                (nome, status, descricao, imagem_blob),
            )
            self.conn.commit()
            QtWidgets.QMessageBox.information(None, "Sucesso", "Espécie adicionada com sucesso!")
            self.listar_especies()  # Atualiza a tabela na interface
            self.limpar_campos()
        except Exception as e:
            QtWidgets.QMessageBox.critical(None, "Erro", f"Erro ao adicionar a espécie: {str(e)}")

    def criar_tabela(self):
        """Cria a tabela no banco de dados, se não existir"""
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS especies (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome TEXT UNIQUE NOT NULL,
                status TEXT,
                descricao TEXT,
                imagem BLOB
            )
        """)
        self.conn.commit()

    def carregar_imagem(self):
        """Abre o seletor de arquivos para escolher uma imagem e exibi-la na tela"""
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(None, "Selecionar Imagem", "",
                                                   "Imagens (*.png *.jpg *.jpeg *.bmp);;", options=options)

        if file_path:
            self.caminho_imagem = file_path
            pixmap = QtGui.QPixmap(file_path)
            self.lb_imagem.setPixmap(pixmap)

    def listar_especies(self):
        """Carrega os dados do banco de dados e exibe na tabela"""
        self.cursor.execute("SELECT id, nome, descricao, status, imagem FROM especies")
        dados = self.cursor.fetchall()

        self.table.setRowCount(len(dados))
        for row_index, row_data in enumerate(dados):
            for col_index, cell_data in enumerate(row_data):
                if col_index == 4:  # Coluna da imagem
                    if cell_data:
                        pixmap = QtGui.QPixmap()
                        pixmap.loadFromData(cell_data)
                        label = QtWidgets.QLabel()
                        label.setPixmap(pixmap.scaled(100, 100, QtCore.Qt.KeepAspectRatio))
                        self.table.setCellWidget(row_index, col_index, label)
                    else:
                        self.table.setItem(row_index, col_index, QtWidgets.QTableWidgetItem("Sem imagem"))
                else:
                    self.table.setItem(row_index, col_index, QtWidgets.QTableWidgetItem(str(cell_data)))

    def limpar_campos(self):
        """Limpa os campos do formulário"""
        self.txt_nome.clear()
        self.txt_descricao.clear()
        self.combobox_status.setCurrentIndex(0)
        self.lb_imagem.clear()
        self.caminho_imagem = None
    def adicionar_especie(self):
        """Adiciona uma nova espécie ao banco de dados e atualiza a tabela"""
        nome = self.txt_nome.text().strip()
        status = self.combobox_status.currentText()
        descricao = self.txt_descricao.toPlainText().strip()

        if not nome:
            QtWidgets.QMessageBox.warning(None, "Erro", "O nome da espécie é obrigatório!")
            return

        try:
            with open(self.caminho_imagem, "rb") as file:
                imagem_blob = file.read()
        except Exception:
            imagem_blob = None

        try:
            self.cursor.execute(
                "INSERT INTO especies (nome, status, descricao, imagem) VALUES (?, ?, ?, ?)",
                (nome, status, descricao, imagem_blob),
            )
            self.conn.commit()
            QtWidgets.QMessageBox.information(None, "Sucesso", "Espécie adicionada com sucesso!")
            self.listar_especies()  # Atualiza a tabela na interface
            self.limpar_campos()
        except Exception as e:
            QtWidgets.QMessageBox.critical(None, "Erro", f"Erro ao adicionar a espécie: {str(e)}")

    def criar_tabela(self):
        """Cria a tabela no banco de dados, se não existir"""
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS especies (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome TEXT UNIQUE NOT NULL,
                status TEXT,
                descricao TEXT,
                imagem BLOB
            )
        """)
        self.conn.commit()

    def carregar_imagem(self):
        """Abre o seletor de arquivos para escolher uma imagem e exibi-la na tela"""
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(None, "Selecionar Imagem", "",
                                                   "Imagens (*.png *.jpg *.jpeg *.bmp);;", options=options)

        if file_path:
            self.caminho_imagem = file_path
            pixmap = QtGui.QPixmap(file_path)
            self.lb_imagem.setPixmap(pixmap)

    def listar_especies(self):
        """Carrega os dados do banco de dados e exibe na tabela"""
        self.cursor.execute("SELECT id, nome, descricao, status, imagem FROM especies")
        dados = self.cursor.fetchall()

        self.table.setRowCount(len(dados))
        for row_index, row_data in enumerate(dados):
            for col_index, cell_data in enumerate(row_data):
                if col_index == 4:  # Coluna da imagem
                    if cell_data:
                        pixmap = QtGui.QPixmap()
                        pixmap.loadFromData(cell_data)
                        label = QtWidgets.QLabel()
                        label.setPixmap(pixmap.scaled(100, 100, QtCore.Qt.KeepAspectRatio))
                        self.table.setCellWidget(row_index, col_index, label)
                    else:
                        self.table.setItem(row_index, col_index, QtWidgets.QTableWidgetItem("Sem imagem"))
                else:
                    self.table.setItem(row_index, col_index, QtWidgets.QTableWidgetItem(str(cell_data)))

    def limpar_campos(self):
        """Limpa os campos do formulário"""
        self.txt_nome.clear()
        self.txt_descricao.clear()
        self.combobox_status.setCurrentIndex(0)
        self.lb_imagem.clear()
        self.caminho_imagem = None

    def buscar_especie(self):
        """Busca espécies no banco de dados com base no nome e exibe os resultados na tabela"""
        nome_busca = self.txt_nome.text().strip()

        if not nome_busca:
            QtWidgets.QMessageBox.warning(None, "Aviso", "Digite um nome para buscar!")
            return

        try:
            self.cursor.execute("SELECT id, nome, descricao, status, imagem FROM especies WHERE nome LIKE ?",
                                (f"%{nome_busca}%",))
            resultados = self.cursor.fetchall()

            if not resultados:
                QtWidgets.QMessageBox.information(None, "Resultado", "Nenhuma espécie encontrada!")
                return

            self.table.setRowCount(len(resultados))
            for row_index, row_data in enumerate(resultados):
                for col_index, cell_data in enumerate(row_data):
                    if col_index == 4:  # Coluna da imagem
                        if cell_data:
                            pixmap = QtGui.QPixmap()
                            pixmap.loadFromData(cell_data)
                            label = QtWidgets.QLabel()
                            label.setPixmap(pixmap.scaled(100, 100, QtCore.Qt.KeepAspectRatio))
                            self.table.setCellWidget(row_index, col_index, label)
                        else:
                            self.table.setItem(row_index, col_index, QtWidgets.QTableWidgetItem("Sem imagem"))
                    else:
                        self.table.setItem(row_index, col_index, QtWidgets.QTableWidgetItem(str(cell_data)))

        except Exception as e:
            QtWidgets.QMessageBox.critical(None, "Erro", f"Erro ao buscar espécies: {str(e)}")

    def preencher_campos(self, row):
        """Preenche os campos do formulário com os dados da linha selecionada na tabela"""
        try:
            # Obtém os dados da linha clicada
            id_especie = self.table.item(row, 0).text()
            nome = self.table.item(row, 1).text()
            descricao = self.table.item(row, 2).text()
            status = self.table.item(row, 3).text()
            imagem = self.table.cellWidget(row, 4).pixmap() if self.table.cellWidget(row, 4) else None

            # Preenche os campos
            self.txt_nome.setText(nome)
            self.txt_descricao.setPlainText(descricao)
            self.combobox_status.setCurrentText(status)
            if imagem:
                self.lb_imagem.setPixmap(imagem)
            else:
                self.lb_imagem.clear()
        except Exception as e:
            QtWidgets.QMessageBox.critical(None, "Erro", f"Erro ao preencher campos: {str(e)}")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Catalogo = QtWidgets.QMainWindow()
    ui = Ui_Catalogo()
    ui.setupUi(Catalogo)
    Catalogo.show()
    sys.exit(app.exec_())
